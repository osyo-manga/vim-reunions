reunions.txt


==============================================================================
概要						*reunions-introduction*

*reunions* は非同期で外部プロセスを扱う為のプラグインです。

Requirement Vim:

  |+reltime|


Requirement Plugin:

  vimproc.vim - https://github.com/Shougo/vimproc.vim


==============================================================================
使い方						*reunions-usage*


==============================================================================
インターフェース				*reunions-interface*

------------------------------------------------------------------------------
関数						*reunions-functions*

reunions#task({expr})				*reunions#task()*
	|CursorHold| と |CursorholdI| 時に {expr} が呼ばれるように処理を追加
	し、{id} を返す。
	{expr} には以下の値を渡すことが出来る。
	
	'Funcref'	その関数を呼び出す
	'Dictionary'	"apply" という名前の辞書関数を呼び出す。

reunions#task_timer({expr}, {time})		*reunions#task_timer()*
	{time} ごとに処理を呼び出す以外は |reunions#task()| と同様である。
	{time} には秒数を |Float| で渡すことが出来る。
	
	NOTE:'updatetime' よりも小さい {time} が設定された場合は 'updatetime'
	毎に処理が呼び出される。
	短い間隔で処理を呼び出したい場合は 'updatetime' の値を小さく剃る必要が
	ある。

reunions#taskkill({id})				*reunions#taskkill()*
	|reunions#task()| で登録した {id} のタスクを終了させる。

reunions#process({command})			*reunions#process()*
	外部コマンド {command} をバックグランドで実行させる。


==============================================================================
タスク						*reunions-task*

|CursorHold| や |CursorHoldI| から呼び出されるタスクを設定する。
タスクが呼ばれるタイミングは 'updatetime' に依存する。


------------------------------------------------------------------------------
登録						*reunions-regist*

|reunions#task()| でタスクを追加する事が出来る。

>
	" タスクを定義
	let task = {
	\	"count" : 0
	\}

	" 呼び出される関数
	function! task.apply(id)
		echo self.count
		let self.count += 1
	endfunction

	" タスクを追加
	let id = reunions#task(task)
<

-----------------------------------------------------------------------------
メンバー					*reunions-task-member*
タスクには以下のような関数を定義する事が出来る

apply({id})					*reunions-task-member-apply()*
	|CursorHold| と |CursorHoldI| から毎回呼ばれる関数。
	この関数内でタスクを削除したい場合は {id} を使用する。

kill({id})					*reunions-task-member-kill()*
	タスクが終了した時に呼ばれる関数。
	終了処理などを行いたい場合はこの関数を定義する。


==============================================================================
process						*reunions-process*

外部コマンドを非同期で処理します。

-----------------------------------------------------------------------------
メンバー					*reunions-process-member*

then({result})					*reunions-process-apply()*
	外部コマンドが終了した場合に呼び出される関数。
	この関数はユーザ側で定義する。
	{result} にはコマンドの出力結果が渡される。
	この関数は 

wait([{timeout}])				*reunions-process-wait()*
	外部コマンドが終了するまで待ち処理を行う。
	{timeout} には 秒数を |Float| で渡すことが出来る。
	{timeout} が渡された場合、その秒数が経過した所で待ち処理が終了する。

get()						*reunions-process-get()*
	外部コマンドの出力結果を取得する。
	この関数は外部コマンドの実行が終了するまで待ち処理が行われる。

==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
