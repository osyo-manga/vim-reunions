reunions.txt


==============================================================================
概要						*reunions-introduction*

*reunions* は非同期で外部プロセスを扱う為のプラグインです。

Requirement Vim:

  |+reltime|


Requirement Plugin:

  vimproc.vim - https://github.com/Shougo/vimproc.vim


==============================================================================
使い方						*reunions-usage*


==============================================================================
インターフェース				*reunions-interface*

------------------------------------------------------------------------------
関数						*reunions-functions*

reunions#task({expr})				*reunions#task()*
	|CursorHold| と |CursorholdI| 時に {expr} が呼ばれるように処理を追加
	し、{id} を返します。
	詳しくは |reunions-task| を参照して下さい。

reunions#task_timer({expr}, {time})		*reunions#task_timer()*
	{time} ごとに処理を呼び出す以外は |reunions#task()| と同様の処理です。
	{time} には秒数を |Float| で渡すことが出来ます。
	
	NOTE:'updatetime' よりも小さい {time} が設定された場合は 'updatetime'
	毎に処理が呼び出されます。
	短い間隔で処理を呼び出したい場合は 'updatetime' の値を小さく設定する必
	要があります。

reunions#taskkill({id})				*reunions#taskkill()*
	|reunions#task()| で登録した {id} のタスクを終了させます。

reunions#process({command})			*reunions#process()*
	外部コマンド {command} をバックグランドで実行させる。


==============================================================================
タスク						*reunions-task*

|CursorHold| や |CursorHoldI| から呼び出される処理を設定します。
登録した処理が呼ばれるタイミングは 'updatetime' に依存します。


------------------------------------------------------------------------------
登録						*reunions-regist*

|reunions#task()| でタスクを追加する事が出来る。

>
	" タスクを定義
	let task = {
	\	"count" : 0
	\}

	" 呼び出される関数
	function! task.apply(id)
		echo self.count
		let self.count += 1
	endfunction

	" タスクを追加
	let id = reunions#task(task)
<

-----------------------------------------------------------------------------
メンバー					*reunions-task-member*

|reunions#task()| には以下の辞書関数を保持した辞書を渡すことが出来ます。

apply({id})					*reunions-task-member-apply()*
	(Required)
	|CursorHold| と |CursorHoldI| から毎回呼ばれる関数です。
	この関数内でタスクを削除したい場合は {id} を使用します。

kill({id})					*reunions-task-member-kill()*
	タスクが終了した時に呼ばれる関数です。
	タスクの終了時に処理をフックしたい場合はこの関数を定義します。


==============================================================================
process						*reunions-process*

外部コマンドを非同期で処理します。
|reunions#process()| の戻り値は辞書を返し、下記の関数を持ちます。

-----------------------------------------------------------------------------
メンバー					*reunions-process-member*

wait_for({timeout})				*reunions-process-wait_for()*
	外部コマンドが終了するまで待ち処理を行います。
	{timeout} には 秒数を |Float| で渡すことが出来ます。
	この関数は以下の戻り値を返します。

	"g:reunions#process#status_ready"	: プロセスが終了
	"g:reunions#process#status_timeout"	: タイムアウト

wait()						*reunions-process-wait()*
	外部コマンドが終了するまで待ち処理を行います。

get()						*reunions-process-get()*
	外部コマンドの出力結果を取得する。
	この関数は外部コマンドの実行が終了するまで待ち処理が行われます。

then({result})					*reunions-process-apply()*
	外部コマンドが終了した場合に呼び出される関数です。
	この関数はユーザ側で定義します。
	この関数が呼び出されるタイミングは |reunions-task-member-apply()| 時に
	なります。
	{result} にはコマンドの出力結果が渡されます。

==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
